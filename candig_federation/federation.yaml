openapi: 3.0.0
info:
  description: Microservice implementation of CanDIG v1 federation
  version: 0.1.4-oas3
  title: CanDIG Federation API POC
  contact:
    email: dnaidoo@bcgsc.ca
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: /v1
paths:
  /service-info:
    get:
      description: Return server info about this instance
      operationId: operations.service_info
      responses:
        '200':
          description: Successful query
  /servers:
    get:
      description: List registered servers.
      operationId: operations.list_servers
      responses:
        '200':
          description: Successful query
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
    post:
      description: Add a server to the federation.
      operationId: operations.add_server
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              required:
                - server
                - authentication
              properties:
                server:
                  $ref: "#/components/schemas/Server"
                authentication:
                  oneOf:
                    - type: object
                      title: CanDIGv2 authentication
                      required:
                        - token
                        - issuer
                      properties:
                        issuer:
                          type: string
                          description: Issuer associated with the OIDC token.
                        token:
                          type: string
                          description: OIDC access token issued to a user from the issuer. Can be expired, as long as it's verifiable with the current public key.
                    - type: object
                      title: Testing server
                      required:
                        - testing
                      properties:
                        testing:
                          type: boolean
                          description: if present and True, this is a request to register a testing server
      responses:
        '200':
          description: OK
        '201':
          description: Server registered successfully
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
  /servers/{server_id}:
    parameters:
      - $ref: "#/components/parameters/server_id"
    get:
      description: Get a server
      operationId: operations.get_server
      responses:
        '200':
          description: Successful query
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
    delete:
      description: Unregister a server
      operationId: operations.delete_server
      responses:
        '200':
          description: Server unregistered successfully
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
  /services:
    get:
      description: List registered services.
      operationId: operations.list_services
      responses:
        '200':
          description: Successful query
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
    post:
      description: Add a service to the federation.
      operationId: operations.add_service
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        '200':
          description: OK
        '201':
          description: Service registered successfully
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
  /services/{service_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      description: Get a service
      operationId: operations.get_service
      responses:
        '200':
          description: Successful query
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
    delete:
      description: Unregister a service
      operationId: operations.delete_service
      responses:
        '200':
          description: Service unregistered successfully
        '403':
          description: Authorization Error
        '404':
          description: Services not found
        '500':
          description: Internal Error
  /search:
    # get:
    #   summary: send query to a microservice
    #   description: >
    #     Entry point for Tyk to pass GET requests to CanDIG microservices.
    #     Federation broadcasting defined by 'federation' header.
    #   operationId: operations.get_search
    #   parameters:
    #     - $ref: '#/components/parameters/endpoint_path'
    #     - $ref: '#/components/parameters/endpoint_payload'
    #     - $ref: '#/components/parameters/Federation'
    #   responses:
    #     '200':
    #       description: Successful query
    #     '400':
    #       description: Bad input parameter
    #     '403':
    #       description: Authorization Error
    #     '404':
    #       description: Expression not found
    #     '500':
    #       description: Internal Error
    #     '508':
    #       description: Federation node time out

    post:
      summary: Send a request to the CanDIG network
      description: >
        Entry point for Tyk to pass ALL requests to CanDIG microservices.
        Federation broadcasting defined by 'federation' header.
      operationId: operations.post_search
      parameters:
        - $ref: '#/components/parameters/Federation'
      responses:
        '201':
          description: entry created
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: Authorization Error
        '404':
          description: Expression not found
        '409':
          description: an existing item already exists
        '500':
          description: Internal Error
        '508':
          description: Federation node time out
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostObject'
components:
  parameters:
    server_id:
      name: server_id
      description: ID of a federated server
      in: path
      required: true
      schema:
        type: string
    service_id:
      name: service_id
      description: ID of a local service that can be queried by federation
      in: path
      required: true
      schema:
        type: string
    endpoint_path:
      name: endpoint_path
      description: Path to microservice endpoint
      in: query
      required: true
      example: datasets/search
      schema:
        type: string
    endpoint_payload:
      name: endpoint_payload
      description: Semicolon separated parameters to pass on
      in: query
      required: false
      example:
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Parameter'
    Federation:
      name: Federation
      description: Flag for federated query. Federation assumed unless false is specified
      in: header
      schema:
        type: boolean
  schemas:
    PostObject:
      type: object
      required:
        - request_type
        - endpoint_path
        - endpoint_payload
        - endpoint_service
      properties:
        request_type:
          type: string
          pattern: '(^GET$)|(^POST$)'
        endpoint_path:
          type: string
          example: v2/get
        endpoint_payload:
          type: object
        endpoint_service:
          type: string
    Parameter:
      type: object
      properties:
        key:
          type: string
        value:
          anyOf:
           - type: string
           - type: array
             items:
              type:
                string
      example: '"ontologies": ["DUO:0000001", "DUO:0000028"]'
    Error:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Server:
      description: A federated CanDIG instance in the network
      type: object
      required:
        - id
        - url
        - location
      properties:
        id:
          type: string
          description: Unique id for the server
        url:
          type: string
          description: Base URL of the CanDIG instance
          example: https://candig.uhnresearch.ca
        location:
          type: object
          properties:
            name:
              type: string
              example: UHN
            province:
              type: string
              example: Ontario
            province-code:
              type: string
              example: ca-on
        testing:
          type: boolean
          description: if True, this is only registered as a test server in Federation, not in CanDIG overall
    Service:
      description: A local CanDIG service that can be queried by the federation service
      type: object
      properties:
        id:
          type: string
          enum:
            - katsu
            - htsget
        url:
          type: string
          description: local URL for use by the federation service
        version:
          type: string
          description: version of the service